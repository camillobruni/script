export GOMA_DIR=$CODE/goma
export V8_BASE=$CODE/v8
export V8_CODE=$V8_BASE/src
export V8_TEST_FLAGS=''
export CHROMIUM_BASE=$CODE/chrome
export CHROMIUM_CODE=$CHROMIUM_BASE/src
export PATH=$CODE/depot_tools:$PATH
export PYTHONPATH=
export CHROME_DEVEL_SANDBOX="/usr/local/sbin/chrome-devel-sandbox"
export GOLDPATH="$CHROMIUM_CODE/third_party/binutils/Linux_x64/Release/bin/"
export PATH=$GOLDPATH:$PATH
export NINJA_STATUS="[%f/%r/%u] "

# This banishes some bad interaction between gdb and goobuntu kernels.
# Perhaps it is a bug in mixed-32/64 kernel handling of 32 bit ptrace.
if [ -d /usr/lib/debug ]; then
    LD_LIBRARY_PATH=/usr/lib/debug
    export LD_LIBRARY_PATH
fi

[[ -r "$CODE/v8/v8/tools/bash-completion.sh" ]] && \
  source "$CODE/v8/v8/tools/bash-completion.sh"

export GOMA_DIR=$CODE/goma

alias f='ag'
alias format="git cl format; g ci -m 'formatting'"
alias goma_prep="unset CC; unset CXX; $CODE/goma/goma_ctl.py update; $CODE/goma/goma_ctl.py ensure_start"
sync() {
    show_cmd gclient sync $@
}


if [[ "$OS" == "mac" ]]; then
    export MAX_OPEN_FILES=500
else
    export MAX_OPEN_FILES=2000
fi

alias debug='ninja_d8_or_chromium Debug'
alias debug64='ninja_d8_or_chromium x64.Debug'
alias debug32='ninja_d8_or_chromium ia32.Debug'
alias release='ninja_d8_or_chromium Release'
alias release64='ninja_d8_or_chromium x64.Release'
alias release32='ninja_d8_or_chromium ia32.Release'
alias optdebug='ninja_d8_or_chromium Optdebug'
alias optdebug64='ninja_d8_or_chromium x64.Optdebug'
alias optdebug32='ninja_d8_or_chromium ia32.Optdebug'
alias deb='debug'
alias deb32='debug32'
alias deb64='debug64'
alias rel='release'
alias rel32='release32'
alias rel64='release64'
alias opt='optdebug'
alias opt64='optdebug64'
alias opt32='optdebug32'

ninja_d8_or_chromium() {
    ROOT=`git rev-parse --show-toplevel`
    if [[ $ROOT == *"chrom"* ]]; then
        ninja_chromium $@
    elif [[ "$ROOT" == *"v8"* ]]; then
        ninja_d8 $@
    else
        echo "Not in a chromium or V8 checkout";
    fi
}

NINJA_SUBTOOLS=(browse clean commands deps graph query targets comdb recompact)
GN_SUBTOOLS=(args check clean desc format gen help ls path refs)
ninja_d8() {
    local ROOT=`git rev-parse --show-toplevel`
    local VERSION=`git rev-parse HEAD | cut -c1-7`
    local CONFIG=$1
    local CONFIG_LOWERCASE=$CONFIG:l
    local BUILD=$ROOT/out/$CONFIG_LOWERCASE
    shift
    # check if first arg is in subtool
    if [[ "$1" == "help" ]]; then
        echo "Subcomands are: tests | ts | cctest | ct | test | t | debug-test | "
        echo "    dt | bench | b | llprof | bsuite | ticks | archive | shell | "
        echo "    flags compile | c | clean | gdb"
        echo "    $NINJA_SUBTOOLS"

    elif [[ -n "$1" ]] && [[ ${GN_SUBTOOLS[(r)$1]} == $1 ]]; then
        SUBCOMMAND=$1
        shift
        show_cmd gn $SUBCOMMAND $BUILD $@

    elif [[ "$1" == "gn" ]]; then
        shift
        SUBCOMMAND=$1
        shift
        show_cmd gn $1 $BUILD $@

    elif [[ "$1" == "gdb" ]]; then
        shift
        show_cmd gdb -ex run --args \
            $BUILD/d8 --allow-natives-syntax --code-comments $@

    elif [[ "$1" == "gdb-mksnapshot" ]]; then
        shift
        show_cmd gdb -ex run \
            --args $BUILD/mksnapshot \
            --startup_src $BUILD/gen/snapshot.cc \
            --startup_blob $BUILD/snapshot_blob.bin \
            --debug-code --code-comments $@

    elif [[ "$1" == "flags" ]]; then
        shift
        show_cmd grep gn args $BUILD --list

    elif [[ "$1" == "tests" || "$1" == "ts" ]]; then
        shift
        cd $ROOT && \
        show_cmd tools/run-tests.py --outdir=$BUILD --no-sorting $V8_TEST_FLAGS $@

    elif [[ "$1" == "cctest" || "$1" == "ct" ]]; then
        shift
        if [[ -z "$@" ]]; then
            echo "Please provide a grep pattern for the cctests"
        else
            for TEST in `$BUILD/cctest --list | grep $@`; do
                #clean the < from --list output
                TEST=${TEST%"<"}
                cd $ROOT && \
                    ( show_cmd $BUILD/cctest $TEST || echo "${RED}FAILED ðŸ’€$NO_COLOR" )

            done
        fi

    elif [[ "$1" == "test" || "$1" == "t" ]]; then
        shift
        if [[ -z "$@" ]]; then
            cd $ROOT && \
            show_cmd tools/run-tests.py --mode $CONFIG --arch $ARCH --buildbot \
                 $V8_TEST_FLAGS $@
        else
            cd $ROOT && \
            show_cmd $BUILD/d8 --predictable --allow-natives-syntax --test --expose-gc\
                test/mjsunit/mjsunit.js $V8_TEST_FLAGS $@
        fi
    
    elif [[ "$1" == "debug-test" || "$1" == "dt" ]]; then
        shift
        cd $ROOT && \
        show_cmd gdb --args $BUILD/d8 --code-comments --predictable \
            --allow-natives-syntax --expose-gc --test \
            test/mjsunit/mjsunit.js $V8_TEST_FLAGS $@
    
    elif [[ "$1" == "bench" || "$1" == "b" ]]; then
        shift
        if [[ -z "$@" ]]; then
            echo "${RED}No Benchmark given. Choices are:$NO_COLOR"
            show_cmd ls $ROOT/_bench/
            echo "Or choose one of the run files in v8-perf/benchmarks:"
            show_cmd ls ~/v8-perf/benchmarks
            return 1
        elif [[ "$@" == *"v8-perf/benchmarks"* ]]; then
            show_cmd run_v8_perf $BUILD/d8 $@
        else
            cd $ROOT && \
            show_cmd $BUILD/d8 _bench/$@
        fi

    elif [[ "$1" == "llprof" ]]; then
        shift
        show_cmd "$ROOT/tools/run-llprof.sh $BUILD/d8 $@; $ROOT/tools/ll_prof.py | less"
   
    elif [[ "$1" == "perf" ]]; then
        shift;
        show_cmd "sudo rm jit*.so jit*.dump perf.data.tmp"
        if [[ "$1" == "clean" ]]; then
            exit;
        fi
        show_cmd "echo 1000000 | sudo tee /proc/sys/kernel/perf_event_max_sample_rate"
        show_cmd "echo 0 | sudo tee /proc/sys/kernel/kptr_restrict"
        # echo "PINNING SUBPROCESS TO CORES 1 & 2"
        show_cmd \
            sudo perf record --freq=100000 -k mono --call-graph fp \
            $BUILD/d8 --perf-prof $@
        show_cmd "sudo chmod a+rw perf.data && mv perf.data perf.data.tmp && perf inject -j -i perf.data.tmp -o perf.data "
        echo "use 'perf report' to analyse your results"

    elif [[ "$1" == "bsuite" ]]; then
        shift
        BASELINE_DIR="_baselines"
        BASELINE="$BASELINE_DIR/$VERSION"
        if [[ "$1" == "baseline" || "$1" == "base" ]]; then
            # don't overwrite existing baselines without asking
            cd $ROOT 
            if [[ -f "$BASELINE" ]]; then
                echo "Baseline for $VERSION exists already, overwrite?[yn]"
                read $REPLY
                if [[ ! $REPLY =~ ^[Yy]$ ]]
                then
                    return 1
                fi
            fi
            cd $ROOT && \
            show_cmd "bsuite/benchmark.py -c \"bsuite/runner.sh $BUILD/d8\" -fv -r20 > $BASELINE"
        elif [[ "$1" == "compare" || "$1" == "cmp" ]]; then
            shift
            CMP_VERSION=`echo $1 | cut -c1-7`
            BASELINE="$BASELINE_DIR/$CMP_VERSION"
            cd $ROOT && \
            show_cmd "bsuite/benchmark.py -c \"bsuite/runner.sh $BUILD/d8\" -fv -r5 | bsuite/compare-baseline.py -b $BASELINE_DIR"
        else
            ARGS="$*"
            if [[ -z "$*" ]]; then
                ARGS="-fv -r5"
            fi
            cd "$ROOT" && \
            show_cmd "bsuite/benchmark.py -c \"bsuite/runner.sh $BUILD/d8\" $ARGS"
        fi
       
    elif [[ "$1" == "ticks" ]]; then
        shift
        if [[ -z "$@" ]]; then
            echo "${RED}No Benchmark given. Choices are:$NO_COLOR"
            show_cmd ls $ROOT/_bench/
            return 1
        else
            cd $ROOT && \
            show_cmd out/$CONFIG/d8 --prof _bench/$@ && \
            tools/linux-tick-processor | less
        fi
    
    elif [[ "$1" == "archive" ]]; then
        shift
        ARCHIVE_NAME="_$CONFIG"
        SUFFIX="_$1"
        if [[ -z "$1" ]] then;
            SUFFIX=""
        fi
        VERSION_DATE=`git show -s --format="%ci" $VERSION | cut -c1-10` && \
        VERSION_DIR=$ROOT/_builds/${VERSION}${ARCHIVE_NAME}_${VERSION_DATE}${SUFFIX} && \
        mkdir $VERSION_DIR && \
        find -L $BUILD -mindepth 1 -maxdepth 1 ! \( -name obj \) -exec cp -R {} $VERSION_DIR \; ;
        echo "Archived ${YELLOW}$BUILD${NO_COLOR} to ${BLUE}$VERSION_DIR${RESET}"

    elif [[ "$1" == "shell" ]]; then
        shift
        show_cmd rlwrap $BUILD/d8 --allow-natives-syntax $@

    else
        # default action is compile
        if [[ "$1" == "compile" || "$1" == "c" ]]; then
            shift
        fi
        # create the ninja config if it doesn't exist.
        if [[ ! -e "$BUILD/args.gn" ]]; then
            show_cmd $ROOT/tools/dev/v8gen.py $CONFIG_LOWERCASE
        fi
        local ARGS="$*"
        if [[ -z "$ARGS" ]]; then
            ARGS="d8 unittests cctest"
        fi
        show_cmd ninja -l 42 -j $MAX_OPEN_FILES -C $BUILD $ARGS && \
        desktop-notification "Compilation Result                            " \
                    "Finished V8 $CONFIG $ARGS" || \
        desktop-notification "Compilation Result                            " \
                    "FAILED V8 $CONFIG $ARGS"
    fi
}

run_v8_perf() {
    local ROOT=`git rev-parse --show-toplevel`
    V8=$ROOT/$1
    shift
    BENCH_DIR=`dirname $@`
    BENCH=`basename $@`
    cd $BENCH_DIR && $V8 --expose-gc $BENCH;
    cd - > /dev/null
}

ninja_chromium() {
    local ROOT=`git rev-parse --show-toplevel`
    local VERSION=`git rev-parse HEAD | cut -c1-7`
    local CONFIG=$1
    local CONFIG_LOWERCASE=$CONFIG:l
    local BUILD=$ROOT/out/$CONFIG_LOWERCASE
    local CHROME_BINARY=$BUILD/chrome
    if [[ "$OS" == "mac" ]]; then
      CHROME_BINARY=$BUILD/Chromium.app/Contents/MacOS/Chromium
    fi
    shift
    # check if first arg is in subtool
    if [[ "$1" == "help" ]]; then
        echo "Subcomands are: blink | archive | gdb-index | compile | c | clean | perf | gdb | flags"
        go/g3doc-ssi-migration is on. Contact oncall/engdoc if your page has problems.
        echo "    gn | $GN_SUBTOOLS"
    elif [[ -n "$1" ]] && [[ ${GN_SUBTOOLS[(r)$1]} == $1 ]]; then
        SUBCOMMAND=$1
        shift
        show_cmd gn $SUBCOMMAND $BUILD $@

    elif [[ "$1" == "gn" ]]; then
        shift
        SUBCOMMAND=$1
        shift
        show_cmd gn $SUBCOMMAND $BUILD $@

    elif [[ "$1" == "flags" ]]; then
        shift
        show_cmd gn args $BUILD --list $@

    elif [[ "$1" == "gdb" ]]; then
        shift
        CHROME_GDB_CMD="xterm -title renderer -e gdb -ex run -ex quit -args"
        show_cmd gdb -ex run --args \
            $CHROME_BINARY --no-sandbox --disable-hang-monitor --disable-gpu \
                --renderer-cmd-prefix=\"$CHROME_GDB_CMD\" \
                $@
        # --plugin-launcher=\"$CHROME_GDB_CMD\" \
    elif [[ "$1" == "blink" ]]; then
        shift
        if [[ -z "$@" ]]; then
            echo "${RED}No blink subcommand given:$NO_COLOR"
            return 1
        fi
        local WEBKIT_SCRIPTS=third_party/WebKit/Tools/Scripts/
        local SUB_CMD=$1
        shift
        if [[ "$SUB_CMD" == "help" ]]; then
            echo "Subcommands are: webkit-test | test | debug-test | perf-tests | perf | layout-test-server | test-server"
        elif [[ "$SUB_CMD" == "webkit-tests" || "$SUB_CMD" == "test" ]]; then
            # layout tests only work in debug configuration
            cd $ROOT && \
            show_cmd $WEBKIT_SCRIPTS/run-webkit-tests \
                --no-build --$CONFIG_LOWERCASE $@
        elif [[ "$SUB_CMD" == "debug-test" ]]; then
            # layout tests only work in debug configuration
            cd $ROOT && \
            show_cmd gdb --args $BUILD/content_shell \
                --run-layout-test --single-process --no-timeout \
                $ROOT/third_party/WebKit/LayoutTests/$@
        elif [[ "$SUB_CMD" == "perf-tests" ]]; then
            cd $ROOT && \
            show_cmd $WEBKIT_SCRIPTS/run-perf-tests --$CONFIG_LOWERCASE $@
        elif [[ "$SUB_CMD" == "layout-test-server" || "$SUB_CMD" == "test-server" ]]; then
            cd $ROOT && \
            show_cmd $WEBKIT_SCRIPTS/webkit-patch layout-test-server $@
        fi

    elif [[ "$1" == "archive" ]]; then
        shift
        ARCHIVE_NAME="_$CONFIG"
        if [[ "$CONFIG" == "Release" ]]; then
            ARCHIVE_NAME="";
        fi
        SUFFIX="_$1"
        if [[ -z "$1" ]] then;
            SUFFIX=""
        fi
        # Avoid copying the massive obj/ directory
        VERSION_DATE=`git show -s --format="%ci" $VERSION | cut -c1-10` && \
        VERSION_DIR=$ROOT/../builds/${VERSION}${ARCHIVE_NAME}_${VERSION_DATE}${SUFFIX} && \
        mkdir $VERSION_DIR && \
        find $BUILD -mindepth 1 -maxdepth 1 ! \( -name obj \) -exec cp -R {} $VERSION_DIR \; ;
        echo "Archived ${YELLOW}$BUILD${NO_COLOR} to ${BLUE}$VERSION_DIR${RESET}"

    elif [[ "$1" == "gdb-index" ]]; then
        echo "${GREEN}Creating GDB Indices$NO_COLOR" && \
        build/gdb-add-index $BUILD/chrome $BUILD/content_shell > /dev/null
    
    elif [[ "$1" == "sync" ]]; then
        show_cmd gclient sync --with_branch_heads --reset --upstream --force
        
    elif [[ "$1" == "perf" ]]; then
        shift;
        BINARY=$1
        shift
        show_cmd "echo 1000000 | sudo tee /proc/sys/kernel/perf_event_max_sample_rate"
        show_cmd "echo 0 | sudo tee /proc/sys/kernel/kptr_restrict"
        # echo "PINNING SUBPROCESS TO CORES 1 & 2"
        show_cmd \
            perf record -a -k mono --call-graph fp \
            $BUILD/$BINARY --js-flags=\"--perf-prof --perf-prof-debug-info\" $@ 
        show_cmd "mv perf.data perf.data.tmp && perf inject -j -i perf.data.tmp -o perf.data"
        show_cmd "rm jit*.so jit*.dump perf.data.tmp"
        echo "use 'perf report' to analyse your results"
    else
        # default action is compile
        if [[ "$1" == 'compile' || "$1" == "c" ]]; then
            shift
        fi
        local ARGS="$*"
        if [[ -z "$ARGS" ]]; then
            ARGS="chrome content_shell blink_tests"
        fi
        show_cmd ninja -l 40 -j $MAX_OPEN_FILES -C $BUILD $ARGS && \
        desktop-notification "Finished Chromium $CONFIG $ARGS" || \
        desktop-notification "FAILED Chromium $CONFIG $ARGS"
    fi
}

show_cmd() {
    # printout the arguments in color
    echo ${YELLOW}${@}${NO_COLOR};
    eval $@;
}


chrome_prep() {
    goma_prep;
    show_cmd gclient sync --with_branch_heads --reset --upstream --force
}

run_10_times() {
  awk '{print ">",$0; for (i = 1; i <= NF; i++) {if ($i+0==$i) {sums[i]+=$i} else {sums[i]=$i}}} END {for (i = 1; i <= NF; i++) { if (sums[i]+0==sums[i]) {printf "%.2f ", sums[i]/NR} else {printf "%s ", sums[i]}}; printf "\n" }' \
    <(for i in {1..10}; do $@ ; done)
}

coverage() {
    ninja -C out/Release -j1000
    tools/run-tests.py --mode Release --arch x64 --buildbot
    lcov --directory out/Release --capture --output-file coverage.info
    genhtml --output-directory _coverage coverage.info
    gnome-open _coverage/index.html
}

